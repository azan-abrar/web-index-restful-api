require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::V1::WebsitesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Website. As you add validations to Website, be sure to
  # adjust the attributes here as well.

  let(:valid_url) {
    "http://www.google.com"
  }

  let(:invalid_url) {
    "www.google.com"
  }

  describe "GET #index" do
    context "if there are websites" do
      it "renders index view" do
        Website.create(url: valid_url)
        get :index, params: {}
        expect(JSON.parse(response.body).first["id"]).to eq(Website.last.id)
      end
    end

    context "if no websites" do
      it "renders index view with error" do
        get :index, params: {}
        JSON.parse(response.body)["error"] == "No record found"
      end
    end
  end

  describe "GET #parse" do
    context "with empty URL param" do
      it "renders error" do
        get :parse, params: {}
        JSON.parse(response.body)["status"] == 400
      end
    end

    context "with in-valid params" do
      it "renders error" do
        get :parse, params: {url: invalid_url}
        JSON.parse(response.body)["status"] == 400
      end
    end

    context "with valid attributes" do
      it "renders parse data" do
        get :parse, params: {url: valid_url}
        JSON.parse(response.body)["status"] == 200
      end
    end
  end
end
